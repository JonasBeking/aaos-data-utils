{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export type DataViewCallback<VehicleDataEventType> = (message : VehicleDataEventType | null, err?: any) => void;\nexport type CallbackID = string;\n\nexport interface VehicleEvent{\n  timestamp : number,\n  event : number\n}\n\nexport interface VehicleDataEvent extends VehicleEvent{\n  data : any\n}\n\nexport interface VehicleErrorEvent extends VehicleEvent{\n  event : -1,\n  reason : string\n}\n\nexport type PermissionStates<T extends string> = {[key in T] : 'denied' | 'granted'}\n\nexport interface VehicleDataService<VehicleDataEventType extends VehicleDataEvent, VehicleErrorEventType extends VehicleErrorEvent>{\n  /**\n   * Generates an active view on the side of android: The view will pass data on a callback so no active polling is\n   * required on the WebView side\n   * @param options\n   * @param callback\n   */\n  generateActiveView(options : {\n    dataId : number,\n    addressableName? : string\n  }, callback : DataViewCallback<VehicleDataEventType>) : Promise<CallbackID>\n  /**\n   * Generates an active view on the side of android: The view will not pass data on a callback so active polling is\n   * required on the WebView side\n   * @param options\n   */\n  generatePassiveView(options : {\n    dataId : number,\n    addressableName? : string\n  }) : Promise<void>\n\n  /**\n   * Removes a view previously generated\n   * @param options\n   */\n  removeView(options : {\n    addressableName : string\n  }) : Promise<void>\n\n  /**\n   * Gets the most recent event received by the view\n   * @param options\n   */\n  view(options : {\n    addressableName : string\n  }) : Promise<VehicleDataEventType | VehicleErrorEventType>\n\n  /**\n   * Gets the latest 16 events received by the view\n   * @param options\n   */\n  viewAll(options : {\n    addressableName : string\n  }) : Promise<{events : Array<VehicleDataEventType | VehicleErrorEventType>}>\n\n}\n\nexport interface RestrictedVehicleDataService<VehicleDataEventType extends VehicleDataEvent, VehicleErrorEventType extends VehicleErrorEvent, PermissionType extends string> extends VehicleDataService<VehicleDataEventType,VehicleErrorEventType>{\n  /**\n   * Gets the status for all permissions\n   */\n  checkPermissions() : Promise<PermissionStates<PermissionType>>\n\n  /**\n   * Requests the permissions passed to it or if nothing is passed, requests all permissions known to the plugin\n   * @param options\n   */\n  requestPermissions(options : {\n    permissions : PermissionType[]\n  }) : Promise<PermissionStates<PermissionType>>\n}\n"]}